#+TITLE:    IN505 - C++ project: Encryption and Decryption
#+AUTHOR:   Gabriel Dos Santos, Raphael Marouani

* Description of the project
The main goal of this project is to program an encryption and decryption application based on the Huffman code.

The Huffman code aims at translating a text in binary (with '0's and '1's) and compressing the size of the output file without losing any data. For each letters in the text to encrypt, we count how many instances of each letters there are and then apply the following algorithm on each one:
- Initially, each letter is represented by a binary tree labeled with the occurence of that character in the text. While there are more than one binary tree, do the following operations:
  1. Take ~A1~ and ~A2~, the two binary trees with the smallest label ~e1~ and ~e2~.
  2. Create a new binary tree ~A~ of which the root ~r~ has for left and right branches the roots of ~A1~ and ~A2~.
  3. Label the root ~r~ of ~A~ with ~e1 + e2~.
- For each node of the final tree, the left branches are labeled with '0's, and the right branches with '1's.
- The code associated with each character is the binary word corresponding to the path from the root of the final binary tree to the leaf representing the letter.

This project is made up of three parts.

** Part 1: Abstract data structures
The goal of this part is to propose an object-oriented implementation of the structure and behavior of a labeled binary tree. In that regard, the objective will be to:
- Propose two classes, the class ~Node~ of which each instance represents the node of a binary tree, and the class ~BinaryTree~ of which each instance represents a binary tree.
- Implement the operations for inserting and removing nodes from the tree, modifying the label of a node, researching an element in the tree, as well as the operations of fusion and decomposition of binary trees. You may also overload the necessary operators.
- Propose a test program that demonstrates the features of a binary tree.
- Implement a simple graphical user interface (GUI) that allows, amongst other things, to print the created binary tree.

** Part 2: Encryption
The goal of this part is to take an input text (it can be in English, French, or any other language that you want) and to output an encrypted text using the Huffman code. Your application must support the following operations:
1. Compute the percentage of occurence for each letter of the alphabet of the input text.
2. Using the previously defined model of a binary tree, create a encryption binary tree that implements the aforementioned algorithm and the statistics evaluated in step 1.
3. Encrypt an input text with the letter encryption made in step 2.
4. Enhance the GUI to allow the user to print the text encrypt and its binary output.

** Part 3: Decryption
The goal of this third and last part is to take a encrypted text with the Huffman code and to decrypt this text. Your application should be able to:
- Verify if a text has been encrypted using the binary tree created in part 2.
- Decrypt a text encrypted with the Huffman code.
- Display the text to decrypt in the GUI and print the result of the decryption process.

* Building the project
This project can either be compiled in debug or release mode.
You can build and/or run it in debug mode using the provided Makefile as follows:
#+BEGIN_SRC bash
# To only build, run:
make build

# To build and run immediately:
make run
#+END_SRC


This will allow you to use the other provided Makefile commands in case you need to do some debugging:
#+BEGIN_SRC bash
# To run with gdb:
make gdb

# To run with valgrind:
make vg
#+END_SRC


If you wish to build and/or run the program in release mode, you can do so by running the following in your terminal:
#+BEGIN_SRC bash
# To only build, run:
make build_release

# To build and run immediately:
make run_release
#+END_SRC
This will compile the project with optimization flags that help the program run faster.


If you wish to build and run the project manually, use the following commands at the root of the project:
#+BEGIN_SRC bash
# First, build the project:
mkdir -p target/release
g++ src/bin/main1.cpp src/lib/Sommet.cpp src/lib/ArbreB.cpp src/test/PartOneTests -std=c++17 -O2 -o target/release/main1

# Then run it:
./target/release/main1
#+END_SRC

Lastly, you can also create an archive of the project with the provided ~archive~ command:
#+BEGIN_SRC bash
make archive
#+END_SRC
